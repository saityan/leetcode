package leetcode.strings

/**
 *  https://leetcode.com/problems/count-number-of-homogenous-substrings/
 *
 *  Given a string s, return the number of homogenous substrings of s.
 */

private class `1759_Number_of_homos` {
    fun countHomogenous(s: String): Long {
        val MODULO = 1_000_000_007L

        fun calculateSum(n: Int): Long = n.toLong() * (n.toLong() + 1) / 2

        var sum = 0L
        var currentHomogenousLength = 1

        for (i in 1 until s.length) {
            if (s[i] == s[i - 1]) currentHomogenousLength++
            else {
                sum = (sum + calculateSum(currentHomogenousLength)) % MODULO
                currentHomogenousLength = 1
            }
        }

        return (sum + calculateSum(currentHomogenousLength)) % MODULO
    }
}
